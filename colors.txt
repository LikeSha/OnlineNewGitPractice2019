black
red
pink

March 25, 2020

git conflict solution

watch video on March 25, 2020 selenium automation course day 18

go to your account --> click " create new file "---> give a name of your file in cloumn --> write something in the file ---> click "commit new file " ( green button on bottom)
now your remote repository added this new file already .

if you added red color in your current file ( file name colors.txt) at you work station ( intelliJ), but at the same time ,your team mate
modified this same name file ahead of you on the git remote repository, and you don't know yet , but you after added red color
you run " git pull" command in console, the result will showing conflict!

How can we resolve this conflict ?

1, git add .
2, git commit -m " added red color"
3, git pull

after run above 3 line of commands, your " colors.txt" file immediately turn to red color ,it means you have conflict in this file.

to completely resolve this issue, we do this :

1, delete the long string code in " colors.txt " file ( long string appear above you finish above 3 commands ), it looks like this :

       black
       <<<<<<< HEAD
       red                                                                                      | your changes
       ========
       pink                                                                                     | your teammate changes
       >>>>>> 5860f28aecb5993fbea0aaff7d7ba99770eb12e2

       How do we resolve a conflict ?

       In git, conflict happens when 2 people modifying same file. So git doesn't know how to combine changes from both of you automatically.

       To fix it, follow these steps :

       once , git pull doesn't work for you

       git add.
       git commit -m "commit message"
       git pull

       Then , git will show you conflicting files. You can manually go and update files and leave content that you want. Then, just commit changes again. By doing this,
       we can decide what changes will stay,since git cannot decide automatically.

       how to manually update? we delete those lines and strings. only left black red pink, after delete like this :

       black
       red
       pink

       then I am gonna repeat steps like below :

       1, git add .
       2, git commit -m "resolved conflict"
       3, git push

       now the conflict issue resolved.

If you are getting : access denied, 403 error, means that you are tyring to push to the repo that is not yours
( you were not added as a collaborator or you are not the owner of this repo )
     ( someone disconnected with remote url , how can we reconnect it ? do this : git remote set-url origin <GITHUB_URL>)

      In case of conflict, if there were modified different files, git can merge automatically.

 lets say : my teammate created a new file named " cars.txt" on remote repository ,
 but I also created a new file named " fruits.txt " in my work station,
      if I commit , now , can we pull ?( pull means get the latest update from remote repository) no problem !
      you can pull because its different files !  no conflict at all to this case , how did I commit ?

      first , I did pull :

      git pull ( after I pull , " cars.txt" already in my work station showing up)

      then , how did I commit ?

      1, git add .
      2, git commit -m " added fruits"
      3, git push

 Now the case  : we are at fruit file. my teammate just added " kiwi " in remote repository, but I just added " dragon fruit" in my work station .

     so in remote repository ,we have : orange mango kiwi , in my own work station ,I have orange mango dragon fruit.

     now : if I run " git pull" in my work station. CONFLICT ! ----- this conflict is caused by same file modification!

      this conflict is caused by same file modification!

      then terminal showing recommendation message to us : " Please commit your changes or stash them before you merge."

      After reading this message ,what we do ? We have to commit our changes ! it giving us hint already.

            1, git add .
            2, git commit -m " added new fruit"
            3, git pull

     immediately , our file " fruits.tex" turn to red color , and it shows bunch of strings and changes in IntellJ top window.

           what we do the next to fix it  ?

           we can right click " fruit.tex" file in intelliJ---> Git---> click "Resolve Conflicts"

           it will pop up a window, this window is giving us options, ask us if we want to merge or not ?

           we click " Merge"

          then, another window popped up : this window showing what we changed and what others changed , others changed on the right site, my change on the left

          now what we do the next ?

          we click "Accept" button which is pink color on the left middle, then click "Accept " button on the right site middle.

          after this ,we combined both changes ! then we click " Apply" on the right bottom of the window.

          now we can commit changes and push them again ! how to do :

          1, git add .
          2, git commit -m " fixed conflict"
          3, git push

now If we try to pull : ( last step )

    git pull

    DONE ! everything is up to date !
For differnet files, we just simply pull and push ,nothing wrong !
the conflict only happend in same files different people udated different content in different place.
  ( someone added something in remote resository, someone added in work stations.....
  this is the cause of conflict ---- must update different things in same file !)

  Now after multiple commands we have done, lets take a look at "Version Control" in IntelliJ

    click " log" tag in version control. to see all details what happened.

    The best way to resolve a conflict is to merge changes. Thus,
        you won't loose your updates and you will get updates from your teammates.

        There is another way how to handle conflict.

        Let's say, if the code is not ready yet, so you cannot really merge changes since your code is not completed.
        You don't want to loose your changes, but also
        you don't want to merge changes. In this case, we can stash changes.

        Stashing means temporary, remove your changes and put them in a safe place.

        Once you will be ready, you can apply those stashed changes any time.

 for example : now we are on github remote repository , my teammate just  edit file " cars.txt" ,
    we added Mercedes s500 in thi file. meanwhile , in my work station, we added

    "Kia Optima " in our "cars.txt" file.

    Now : if we do " git pull" in intelliJ , it is saying a problem, it suggest
    " Please commit your changes or stash them before you merge"

    the common solution is , we repeat above thos steps and merge our codes, in stead of doing that method, we can stash .

    we will just say :

    git stash

    immediately, "Kia Optima" which is in our work station ,is gone ! We stashed our change ! it means, we put " Kia Optima" back from the file ,and
    put it into a safe place to store it for future use.

    after this ,we do following steps :

    git stash list

    this command will show our the list of stashed in terminal console intelliJ, as for now we have only one .like below :

    stash!{0}: WIP on master: 4923690 resolved conflict

    then we do :

    git pull


    now our work station shows " Mercedes s500" added into our work station file " cars.txt"

    now we do this :

    git stash pop

    git stash pop this command means : get the latest stash changes and apply them to our code back ,and it looks like a regular conflict. now we can handle this regular conflic
    by using normall steps. just right click "cars.tex "---> Git---> click "Resovle Conflict" ---> Merge ---> Accept

    then , we write :

    git add .
    git commit -m "resolved conflict"
    git push

    CONFLICT RESOLVED ! Now everytyhing works fine !

    conclusion of steps of stash

    1, git stash
    2, git stash list
    3, git pull
    4, git stash pop
    5, git add .
    6, git commit -m "resolved conflict"
    7, git push



    summary of stash :

    You have made changes to some file that was modified by your teammate as well
    what you can do ?

    -merge changes
    -just leave your changes
    -just accept changes
    -stash changes -->

              git stash


        every stash , has some id :  stash@{0}
        stash message :  WIP on master: 4923690 resolved conflict

     Once you have stashed your changes, they will be temporary removed from your code. But,
     they will not disappear. They will be stashed.

     Once you stashed changes, you can easily pull updates :

     git pull

     Then , once you want to apply stashed changes again, just run :

     git stash pop ---> it will apply last stash to your code back. It will create a conflict,
     so you would need manually/with tools resolve the conflict

     If you have couple of stashes :

     git stash list ---- to see all stashes

     git stash pop < stash_id> to apply specific stash, not just latest one.

If you want to delete all stashes :

 git stash clear

 for example , you want to delete specific one :

  git stash drop <stash_id>


  April 1,2020

    Agenda git branches

    How do we track changes ? For this, we have git, and whenever we make new scripts,
    or update something in our project, we make a commit.

    commit--it's snapshot of changes in the project at certain point.

    commit #1 --"Initial commit"

       BrowserUtilities
       ConfigurationReader
       TestBase
       Driver
       pom.xml
       configuration.properties

    commit #2 --"Added login tests class with 2 tests"

       LoginTests

    commit #3 --"Added login page class"

       LoginTest--updated
       LoginPage

    commit #4 --"Added BasePage class"

       LoginPage--updated
       BasePage

     by default, git creates only one branch---master.  It's like one history of your project.
     But also, you can create another branch and have different commits going in parallel.

     At any point, you can create a new branch.

     But, why do we need this ?

     First of all, it allows to keep leatest stable and verified code in master branch. When you gonna work on code ,
     most likely you will be working on your own branch. Then,
     once you are done you can propose your changes to the main branch---master. It calls--pull request.

     For example , developers they create a new branch for some feature.
     They can work within that branch alone and make commits.
     Then, once feature has been developed ,developer can create a pull request to merge new code with master branch .
     Code will be revieed and tested by CI tests.

     CI --Continues Integration ( related to Jenkins)

     who is gonna review ? Owner of the repository .Some lead, main tester ,main developer.

     branch --represents independent line of development. Having 2 branches ,
     it's like cloning project twice and work on 2 different versions. But when you clone project twice, to merge them,
     you would need to do it manually. When you have 2 branches, you can easily merge the code. Plus remotely,
     you will have that branch as well. Every branch has it's own history of commits. By creating new branch ,
     you are getting brand new working directory.

     git commit -a -m "added a new car"  -- -- this is add and committing in the same time !

     git push---send our code to github

     git pull --to get updates from github

     git branch--to see list of branches

     git branch <name> --create a new branch, branch out from the current branch--master

     git branch dev --create a new branch wth name --dev

     git checkout <branch name> ---to switch to another branch

     git log --graph --oneline  ------to see the commits history. press q to exit

      git push --set-upstream origin <branch_name>    ------------------push branch to github

      In my team, everyone has their own branch. We don't commit to the master branch directly.
      Instead, we work on our own branches. Master branch has latest stable and verified code.
      Once I complete my task, I create a pull request that will be verified by test lead/other tester.

      how to merge branches locally ?

      switch to master branch

          git checkout master

      merge

          git merge dev


       once you have switched to master branch ,it will import changes from dev branch.

       git branch -d <branch_name>   delete branch

       git checkout -b <name>   create and switch to the branch at the same time.

       git branch -m <new name>   rename current branch

       C:\Users\Owner\IdeaProjects\OnlineNewGitPractice2019>git branch -d newfeature
  error: Cannot delete branch 'newfeature' checked out at 'C:/Users/Owner/IdeaProjects/OnlineNewGitPractice2019'

  -d   to delete

  You cannot delete a branch, until you merge. If there are some commits.

  Also, you cannot delete a branch until you are on that branch

  git branch -D <branch_name>    force delete

  But make sure ,you step out from that branch first .

  git checkout master
  git branch -D newfeature

  Create new branch and switch to it:

     git checkout -b feature

     before changing branch , commit!!!!

     After merging branches, we were able to delete feature branch.
