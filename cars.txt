Toyota Corolla
Audi R8
Tesla
BMW 3
BMW X6
Mercedes S500
Kia Optima
Lexus GX470
Kia Optima
Honda Civic
Subaru WRX STI
Range Rover Velar

March 25, 2020

git conflict solution

watch video on March 25, 2020 selenium automation course day 18

go to your account --> click " create new file "---> give a name of your file in cloumn --> write something in the file ---> click "commit new file " ( green button on bottom)
now your remote repository added this new file already .

if you added red color in your current file ( file name colors.txt) at you work station ( intelliJ), but at the same time ,your team mate
modified this same name file ahead of you on the git remote repository, and you don't know yet , but you after added red color
you run " git pull" command in console, the result will showing conflict!

How can we resolve this conflict ?

1, git add .
2, git commit -m " added red color"
3, git pull

after run above 3 line of commands, your " colors.txt" file immediately turn to red color ,it means you have conflict in this file.

to completely resolve this issue, we do this :

1, delete the long string code in " colors.txt " file ( long string appear above you finish above 3 commands ), it looks like this :

       black
       <<<<<<< HEAD
       red                                                                                      | your changes
       ========
       pink                                                                                     | your teammate changes
       >>>>>> 5860f28aecb5993fbea0aaff7d7ba99770eb12e2

       How do we resolve a conflict ?

       In git, conflict happens when 2 people modifying same file. So git doesn't know how to combine changes from both of you automatically.

       To fix it, follow these steps :

       once , git pull doesn't work for you

       git add.
       git commit -m "commit message"
       git pull

       Then , git will show you conflicting files. You can manually go and update files and leave content that you want. Then, just commit changes again. By doing this,
       we can decide what changes will stay,since git cannot decide automatically.

       how to manually update? we delete those lines and strings. only left black red pink, after delete like this :

       black
       red
       pink

       then I am gonna repeat steps like below :

       1, git add .
       2, git commit -m "resolved conflict"
       3, git push

       now the conflict issue resolved.

If you are getting : access denied, 403 error, means that you are tyring to push to the repo that is not yours
( you were not added as a collaborator or you are not the owner of this repo )
     ( someone disconnected with remote url , how can we reconnect it ? do this : git remote set-url origin <GITHUB_URL>)

      In case of conflict, if there were modified different files, git can merge automatically.

 lets say : my teammate created a new file named " cars.txt" on remote repository ,
 but I also created a new file named " fruits.txt " in my work station,
      if I commit , now , can we pull ?( pull means get the latest update from remote repository) no problem !
      you can pull because its different files !  no conflict at all to this case , how did I commit ?

      first , I did pull :

      git pull ( after I pull , " cars.txt" already in my work station showing up)

      then , how did I commit ?

      1, git add .
      2, git commit -m " added fruits"
      3, git push

 Now the case  : we are at fruit file. my teammate just added " kiwi " in remote repository, but I just added " dragon fruit" in my work station .

     so in remote repository ,we have : orange mango kiwi , in my own work station ,I have orange mango dragon fruit.

     now : if I run " git pull" in my work station. CONFLICT ! ----- this conflict is caused by same file modification!

      this conflict is caused by same file modification!

      then terminal showing recommendation message to us : " Please commit your changes or stash them before you merge."

      After reading this message ,what we do ? We have to commit our changes ! it giving us hint already.

            1, git add .
            2, git commit -m " added new fruit"
            3, git pull

     immediately , our file " fruits.tex" turn to red color , and it shows bunch of strings and changes in IntellJ top window.

           what we do the next to fix it  ?

           we can right click " fruit.tex" file in intelliJ---> Git---> click "Resolve Conflicts"

           it will pop up a window, this window is giving us options, ask us if we want to merge or not ?

           we click " Merge"

          then, another window popped up : this window showing what we changed and what others changed , others changed on the right site, my change on the left

          now what we do the next ?

          we click "Accept" button which is pink color on the left middle, then click "Accept " button on the right site middle.

          after this ,we combined both changes ! then we click " Apply" on the right bottom of the window.

          now we can commit changes and push them again ! how to do :

          1, git add .
          2, git commit -m " fixed conflict"
          3, git push

       now If we try to pull : ( last step )

           git pull

           DONE ! everything is up to date !
For differnet files, we just simply pull and push ,nothing wrong !
the conflict only happend in same files different people udated different content in different place.
  ( someone added something in remote resository, someone added in work stations.....
  this is the casue of conflict ---- must update different things in same file !)

  Now after multiple commands we have done, lets take a look at "Version Control" in IntelliJ

    click " log" tag in version control. to see all details what happened.

    The best way to resolve a conflict is to merge changes. Thus,
    you won't loose your updates and you will get updates from your teammates.

    There is another way how to handle conflict.

    Let's say, if the code is not ready yet, so you cannot really merge changes since your code is not completed.
    You don't want to loose your changes, but also
    you don't want to merge changes. In this case, we can stash changes.

    Stashing means temporary, remove your changes and put them in a safe place.

    Once you will be ready, you can apply those stashed changes any time.

